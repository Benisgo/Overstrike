name: "Overstrike Release"

permissions:
  contents: write
  packages: read

on:
  push:
    tags:
      - "OS/v*"

env:
  CSPROJ: Overstrike/Overstrike.csproj
  PUBLISH_DIR: Overstrike/bin/Release/net7.0-windows/publish/win-x64/
  UPDATER_CSPROJ: Updater/Updater.csproj
  UPDATER_PUBLISH_DIR: Updater/bin/Release/net7.0-windows/publish/win-x64/
  PROXY_PROJECT_DIR: ScriptsProxy/
  PROXY_VCXPROJ: ScriptsProxy/ScriptsProxy.vcxproj
  PROXY_PUBLISH_DIR: ScriptsProxy/x64/Release/

jobs:
  publish:
    runs-on: windows-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Scripts Proxy - Setup msbuild
        uses: microsoft/setup-msbuild@v2

      - name: Scripts Proxy - Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          runVcpkgInstall: true
          vcpkgJsonGlob: '${{ env.PROXY_PROJECT_DIR }}/vcpkg.json'
          vcpkgGitCommitId: 'a42af01b72c28a8e1d7b48107b33e4f286a55ef6'

      - name: Scripts Proxy - Restore vcpkg packages
        run: vcpkg integrate install

      - name: Scripts Proxy - Build
        run: msbuild /p:Configuration=Release /p:Platform=x64 ${{ env.PROXY_VCXPROJ }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Publish the project
        run: dotnet publish ${{ env.CSPROJ }} -p:PublishProfile=FolderProfile

      - name: Publish the Updater project
        run: dotnet publish ${{ env.UPDATER_CSPROJ }} -p:PublishProfile=FolderProfile

      - name: Add scripts_proxy.dll
        run: cp "${{ env.PROXY_PUBLISH_DIR }}winmm.dll" "${{ env.PUBLISH_DIR }}scripts_proxy.dll"

      - name: Add Updater.exe
        run: cp "${{ env.UPDATER_PUBLISH_DIR }}Overstrike Updater.exe" "${{ env.PUBLISH_DIR }}Check for updates.exe"

      - name: Add LICENSE.txt
        run: cp LICENSE.txt ${{ env.PUBLISH_DIR }}

      - name: Add README.txt
        run: cp Overstrike/README.txt ${{ env.PUBLISH_DIR }}

      - name: Add Quickstart.txt
        run: cp Overstrike/Quickstart.txt ${{ env.PUBLISH_DIR }}

      - name: Generate names by tag
        id: names
        shell: bash
        run: |
          {
            ref="${{ github.ref }}"
            ref=${ref//refs\/tags\//}

            release_name=${ref/OS\/v/Overstrike (v. }
            echo "release_name=${release_name})" >> $GITHUB_OUTPUT

            archive_name=${ref/OS\/v/Overstrike_v}
            archive_name=${archive_name// /_}
            echo "archive_name=${archive_name}.zip" >> $GITHUB_OUTPUT
          }

      - name: Zip the files
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: "zip"
          filename: ${{ steps.names.outputs.archive_name }}
          directory: ${{ env.PUBLISH_DIR }}
          exclusions: "*.pdb"

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ steps.names.outputs.release_name }}
          body: ""
          artifacts: "${{ env.PUBLISH_DIR }}${{ steps.names.outputs.archive_name }}"
